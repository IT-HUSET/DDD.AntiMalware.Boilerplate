using ITHuset.DDD.AntiMalware.Domain.SeedWork;
using Shouldly;
using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace ITHuset.DDD.AntiMalware.UnitTests.Domain.SeedWork
{
    [TestClass]
	public class ValueObjectTests
	{
		[TestMethod]
		public void Equals_WhenComparingEqualObjects_AreEqual()
		{
			var name = "foo";
			var number = 123;
			var obj1 = new MyValueObject(name, number);
			var obj2 = new MyValueObject(name, number);

			var areEqual = obj1.Equals(obj2);

			areEqual.ShouldBeTrue();
		}

		[TestMethod]
		public void EqualityOperator_WhenComparingEqualObjects_AreEqual()
		{
			var name = "foo";
			var number = 123;
			var obj1 = new MyValueObject(name, number);
			var obj2 = new MyValueObject(name, number);

			var areEqual = obj1 == obj2;

			areEqual.ShouldBeTrue();
		}

		[TestMethod]
		public void InequalityOperator_WhenComparingEqualObjects_AreNotDifferent()
		{
			var name = "foo";
			var number = 123;
			var obj1 = new MyValueObject(name, number);
			var obj2 = new MyValueObject(name, number);

			var areDifferent = obj1 != obj2;

			areDifferent.ShouldBeFalse();
		}

		[TestMethod]
		public void EqualityOperator_WhenComparingNullToNull_AreEqual()
		{
			MyValueObject obj1 = null;

			var areEqual = obj1 == null;

			areEqual.ShouldBeTrue();
		}

		[TestMethod]
		public void Equals_WhenComparingObjectToNull_AreNotEqual()
		{
			var name = "foo";
			var number = 123;
			var obj1 = new MyValueObject(name, number);

			var areEqual = obj1.Equals(null);

			areEqual.ShouldBeFalse();
		}

		[TestMethod]
		public void EqualityOperator_WhenComparingObjectToNull_AreNotEqual()
		{
			var name = "foo";
			var number = 123;
			var obj1 = new MyValueObject(name, number);

			var areEqual = obj1 == null;

			areEqual.ShouldBeFalse();
		}

		[TestMethod]
		public void Equals_WithEqualityComponentsNull_ShouldThrow()
		{
			var instance1 = new Dummy1();
			var instance2 = new Dummy1();
			Action action = () => instance1.Equals(instance2);

			action.ShouldThrow<InvalidOperationException>()
				.Message.ShouldBe("GetEqualityComponents must return at least one component.");
		}

		[TestMethod]
		public void GetHashCode_WithEqualityComponentsNull_ShouldThrow()
		{
			var instance = new Dummy1();
			Action action = () => instance.GetHashCode();

			action.ShouldThrow<InvalidOperationException>()
				.Message.ShouldBe("GetEqualityComponents must return at least one component.");
		}

		[TestMethod]
		public void Equals_WithEqualityComponentsEmpty_ShouldThrow()
		{
			var instance1 = new Dummy2();
			var instance2 = new Dummy2();
			Action action = () => instance1.Equals(instance2);

			action.ShouldThrow<InvalidOperationException>()
				.Message.ShouldBe("GetEqualityComponents must return at least one component.");
		}

		[TestMethod]
		public void GetHashCode_WithEqualityComponentsEmpty_ShouldThrow()
		{
			var instance = new Dummy2();
			Action action = () => instance.GetHashCode();

			action.ShouldThrow<InvalidOperationException>()
				.Message.ShouldBe("GetEqualityComponents must return at least one component.");
		}

		[TestMethod]
		public void Equals_WithTwoDifferentObjects_AreNotEqual()
		{
			var name = "foo";
			var number = 123;
			var obj1 = new MyValueObject(name, number);
			var obj2 = new Dummy3();

			var areEqual = obj1.Equals(obj2);

			areEqual.ShouldBeFalse();
		}

		[TestMethod]
		public void EqualityOperator_WithTwoDifferentObjects_AreNotEqual()
		{
			var name = "foo";
			var number = 123;
			var obj1 = new MyValueObject(name, number);
			var obj2 = new Dummy3();

			var areEqual = obj1 == obj2;

			areEqual.ShouldBeFalse();
		}

		[TestMethod]
		public void GetHashCode_WithOneEqualityComponentWhichIsNull_ReturnsCorrectHash()
		{
			var instance = new Dummy3();
			instance.GetHashCode().ShouldBe(17 * 23);
		}


		#region Test objects

		private class MyValueObject : ValueObject
		{
			public MyValueObject(string name, int number)
			{
				Name = name;
				Number = number;
			}

			public string Name { get; }

			public int Number { get; }

			protected override IEnumerable<object> GetEqualityComponents()
			{
				yield return Name;
				yield return Number;
			}
		}

		private class Dummy1 : ValueObject
		{
			protected override IEnumerable<object> GetEqualityComponents()
			{
				return null;
			}
		}

		private class Dummy2 : ValueObject
		{
			protected override IEnumerable<object> GetEqualityComponents()
			{
				return new object[0];
			}
		}

		private class Dummy3 : ValueObject
		{
			protected override IEnumerable<object> GetEqualityComponents()
			{
				return new[] { (object)null };
			}
		}

		#endregion
	}
}
