using AutoMapper;
using ITHuset.DDD.AntiMalware.Api.Mapping;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.OpenApi.Models;
using System;
using System.IO;

namespace ITHuset.DDD.AntiMalware.Api.Configuration
{
    internal static class ServiceCollectionExtensions
    {
        public static IServiceCollection AddApiDocumentation(this IServiceCollection services)
        {
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo
                {
                    Title = $"{Constants.ApplicationName}",
                    Version = "v1",
                });

                var filePath = Path.Combine(AppContext.BaseDirectory, "ApiComments.xml");
                c.IncludeXmlComments(filePath);
            });

            return services;
        }

        public static IServiceCollection AddDependencies(this IServiceCollection services)
        {
            //services
            //    .AddScoped<IFooRepository, FooRepository>()
            //    ;

            return services;
        }

        public static IServiceCollection AddMappingConfiguration(this IServiceCollection services)
        {
            services.AddSingleton(provider => new MapperConfiguration(cfg =>
            {
                // Forces AutoMapper to not map to private/protected properties, ensuring that constructor mapping is used for domain objects.
                // NOTE! You cannot have optional constructor parameters on domain objects when using AutoMapper's constructor mapping:
                // https://github.com/AutoMapper/AutoMapper/issues/99
                cfg.ForAllMaps((tm, me) => me.IgnoreAllPropertiesWithAnInaccessibleSetter());

                cfg.AddProfile<ApiMappingProfile>();
            }).CreateMapper());

            return services;
        }
    }
}
