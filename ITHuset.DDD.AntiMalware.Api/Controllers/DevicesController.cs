using AutoMapper;
using ITHuset.DDD.AntiMalware.Api.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace ITHuset.DDD.AntiMalware.Api.Controllers
{
    [ApiController]
    public class DevicesController : ControllerBase
    {
        private readonly IMapper _mapper;

        public DevicesController(
            IMapper mapper)
        {
            _mapper = mapper;
        }

        /// <summary>
        /// Lists all Devices registered to the specified User.
        /// </summary>
        /// <param name="userId">The UserId to list Devices for.</param>
        [HttpGet]
        [Route("users/{userId}/devices")]
        [ProducesResponseType(typeof(IEnumerable<Device>), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        public async Task<IActionResult> ListDevicesForUser(int userId)
        {
            #region Dummy implementation
            var devices = new List<Device>
            {
                new Device
                {
                    Id = 1,
                    UserId = userId,
                    Name = "Foo",
                    OperatingSystem = OperatingSystem.Linux
                },
                new Device
                {
                    Id = 2,
                    UserId = userId,
                    Name = "Bar",
                    OperatingSystem = OperatingSystem.Windows
                },
            };

            await Task.CompletedTask;
            return Ok(devices);
            #endregion
        }

        /// <summary>
        /// Lists all Devices that have Threats reported.
        /// </summary>
        [HttpGet]
        [Route("devices/hasThreats")]
        [ProducesResponseType(typeof(IEnumerable<Device>), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        public async Task<IActionResult> ListDevicesWithThreats()
        {
            #region Dummy implementation
            return await ListDevicesForUser(1);
            #endregion
        }

        /// <summary>
        /// Registers a new Device to the specified User.
        /// </summary>
        /// <param name="userId">The UserId to register the Devices to.</param>
        /// <param name="device">The Device to register.</param>
        /// <response code="201">Device was registered successfully.</response>
        [HttpPost]
        [Route("users/{userId}/devices")]
        [ProducesResponseType(typeof(Device), StatusCodes.Status201Created)]
        public async Task<IActionResult> RegisterDevice(int userId, Device device)
        {
            #region Dummy implementation
            device.Id = 4711;
            device.UserId = userId;

            await Task.CompletedTask;
            #endregion

            return Created("", device); // No GET endpoint exists to refer to
        }
    }
}
