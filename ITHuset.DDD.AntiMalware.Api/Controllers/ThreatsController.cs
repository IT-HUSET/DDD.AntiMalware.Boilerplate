using AutoMapper;
using ITHuset.DDD.AntiMalware.Api.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace ITHuset.DDD.AntiMalware.Api.Controllers
{
    [ApiController]
    public class ThreatsController : ControllerBase
    {
        private readonly IMapper _mapper;

        public ThreatsController(
            IMapper mapper)
        {
            _mapper = mapper;
        }

        /// <summary>
        /// Lists all Threats reported on the specified Device.
        /// </summary>
        /// <param name="deviceId">The DeviceId to list Threats for.</param>
        [HttpGet]
        [Route("devices/{deviceId}/threats")]
        [ProducesResponseType(typeof(IEnumerable<Threat>), StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status204NoContent)]
        public async Task<IActionResult> ListThreatsForDevice(int deviceId)
        {
            #region Dummy implementation
            var threats = new List<Threat>
            {
                new Threat
                {
                    Id = 1,
                    DeviceId = deviceId,
                    Hash = "ABC123",
                    Type = ThreatType.Executable,
                    Classification = ThreatClassification.VirusOrWorm
                },
                new Threat
                {
                    Id = 2,
                    DeviceId = deviceId,
                    Hash = "FOOBAR",
                    Type = ThreatType.Script,
                    Classification = ThreatClassification.Adware
                },
            };

            await Task.CompletedTask;
            return Ok(threats);
            #endregion
        }

        /// <summary>
        /// Reports a new Threat on the specified Device.
        /// </summary>
        /// <param name="deviceId">The DeviceId to report the Threat on.</param>
        /// <param name="threat">The Threat to report.</param>
        /// <response code="201">Threat was reported successfully.</response>
        [HttpPost]
        [Route("devices/{deviceId}/threats")]
        [ProducesResponseType(typeof(Threat), StatusCodes.Status201Created)]
        public async Task<IActionResult> ReportThreat(int deviceId, Threat threat)
        {
            #region Dummy implementation
            threat.Id = 800101;
            threat.DeviceId = deviceId;

            await Task.CompletedTask;
            #endregion

            return Created("", threat); // No GET endpoint exists to refer to
        }
    }
}
